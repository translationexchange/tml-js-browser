#!/usr/bin/env ruby

require 'json'
require 'pp'
require 'slop'
require 'rubygems'
require 'hmac-sha1'
require 'net/https'
require 'base64'

def package_path
  './package.json'
end

def package
  @package ||= JSON.parse(File.read(package_path))
end

def version
  package['version']
end

def build_number
  version.split('.').last.to_i
end

def increment_build_number
  parts = version.split('.')
  parts[parts.count-1] = build_number + 1
  package['version'] = parts.join('.')

  File.open(package_path, 'w') do |file|
    file.write(JSON.pretty_generate(package))
  end
end

def execute(cmd)
  puts "\n***************************************************************************"
  puts "$ #{cmd}"

  result = system(cmd)
  if result == 1
    pp 'Failed to deploy'
    exit
  end
end

opts = Slop.parse do |o|
  o.string  '-e', '--environment' , 'indicates the desired environment you wish to deploy to', default: 'sandbox'
  o.on      '-v', '--version', 'prints current version of the SDK (for sanity check)' do
    puts "Current version is #{version}"
    exit
  end
end

def version_or_environment(opts)
  opts[:environment] == 'production' ? version : opts[:environment]
end

def invalidate(files, opts)
  unless ['production', 'staging', 'sandbox'].include?(opts[:environment])
    return
  end

  puts "Invalidating #{files.count} files..."

  s3_access=ENV['AWS_ACCESS_KEY_ID']
  s3_secret=ENV['AWS_SECRET_ACCESS_KEY']
  cf_distribution=ENV['AWS_CLOUDFRONT_CDN_ID']

  paths = '<Path>/' + files.join('</Path><Path>/') + '</Path>'

  date = Time.now.utc
  date = date.strftime("%a, %d %b %Y %H:%M:%S %Z")
  digest = HMAC::SHA1.new(s3_secret)
  digest << date

  uri = URI.parse('https://cloudfront.amazonaws.com/2010-08-01/distribution/' + cf_distribution + '/invalidation')

  req = Net::HTTP::Post.new(uri.path)
  req.initialize_http_header({
    'x-amz-date' => date,
    'Content-Type' => 'text/xml',
    'Authorization' => "AWS %s:%s" % [s3_access, Base64.encode64(digest.digest)]
  })

  req.body = "<InvalidationBatch>" + paths + "<CallerReference>ref_#{Time.now.utc.to_i}</CallerReference></InvalidationBatch>"

  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  res = http.request(req)

  puts res.body
end

pp("Deploying version #{version} to tools/tml/#{version_or_environment(opts)}/tml.js...")

execute('(grunt build)')

# check in the new version
execute("git add dist")
execute("git commit -m 'Updated distribution for version #{version}'")

# push to github
execute("git push")

if opts[:environment] == 'production'
  execute("git checkout master")
  execute("git merge develop")
  execute("git push")
  execute("git tag '#{version}'")
  execute("git push --tags")
  execute("npm publish")

  execute("aws s3 cp dist/tml.js s3://trex-snapshots/tools/tml/#{version}/tml.js")
  execute("aws s3 cp dist/tml.min.js s3://trex-snapshots/tools/tml/#{version}/tml.min.js")

  execute("aws s3 cp dist/tml.js s3://trex-snapshots/tools/tml/stable/tml.js")
  execute("aws s3 cp dist/tml.min.js s3://trex-snapshots/tools/tml/stable/tml.min.js")
  invalidate(["tools/tml/stable/tml.js", "tools/tml/stable/tml.min.js"], opts)
  execute("open https://cdn.translationexchange.com/tools/tml/stable/tml.min.js")

  execute("git checkout develop")

  # increment version
  puts("Incrementing build number to #{build_number + 1}...\n")
  increment_build_number

  # check in the new version
  execute("git add package.json")
  execute("git commit -m 'Incremented build version to #{version}'")
  execute("git push")

else
  execute("aws s3 cp dist/tml.js s3://trex-snapshots/tools/tml/#{opts[:environment]}/tml.js")
  execute("aws s3 cp dist/tml.min.js s3://trex-snapshots/tools/tml/#{opts[:environment]}/tml.min.js")
  invalidate(["tools/tml/#{opts[:environment]}/tml.js", "tools/tml/#{opts[:environment]}/tml.min.js"], opts)

  execute("open https://cdn.translationexchange.com/tools/tml/#{opts[:environment]}/tml.min.js")
end

puts("\n\nCongratulations, the tml v#{version} has been deployed...")

